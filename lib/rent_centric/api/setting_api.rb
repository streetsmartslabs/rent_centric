=begin
#V4 Online API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v4

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15

=end

require 'uri'

module RentCentric
  class SettingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param mobile_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization {token_type} {access_token}
    # @return [ResponseMobileAppVersionDTO]
    def setting_get_api_version(mobile_name, opts = {})
      data, _status_code, _headers = setting_get_api_version_with_http_info(mobile_name, opts)
      data
    end

    # @param mobile_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization {token_type} {access_token}
    # @return [Array<(ResponseMobileAppVersionDTO, Fixnum, Hash)>] ResponseMobileAppVersionDTO data, response status code and response headers
    def setting_get_api_version_with_http_info(mobile_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingApi.setting_get_api_version ...'
      end
      # verify the required parameter 'mobile_name' is set
      if @api_client.config.client_side_validation && mobile_name.nil?
        fail ArgumentError, "Missing the required parameter 'mobile_name' when calling SettingApi.setting_get_api_version"
      end
      # resource path
      local_var_path = '/api/Setting/GetApiVersion'

      # query parameters
      query_params = {}
      query_params[:'mobileName'] = mobile_name

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseMobileAppVersionDTO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingApi#setting_get_api_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization {token_type} {access_token}
    # @return [ResponseListCountryDTO]
    def setting_get_countries(opts = {})
      data, _status_code, _headers = setting_get_countries_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization {token_type} {access_token}
    # @return [Array<(ResponseListCountryDTO, Fixnum, Hash)>] ResponseListCountryDTO data, response status code and response headers
    def setting_get_countries_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingApi.setting_get_countries ...'
      end
      # resource path
      local_var_path = '/api/Setting/GetCountries'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseListCountryDTO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingApi#setting_get_countries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :location_id 
    # @option opts [String] :authorization {token_type} {access_token}
    # @return [ResponseString]
    def setting_get_currency_symbol(opts = {})
      data, _status_code, _headers = setting_get_currency_symbol_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :location_id 
    # @option opts [String] :authorization {token_type} {access_token}
    # @return [Array<(ResponseString, Fixnum, Hash)>] ResponseString data, response status code and response headers
    def setting_get_currency_symbol_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingApi.setting_get_currency_symbol ...'
      end
      # resource path
      local_var_path = '/api/Setting/GetCurrencySymbol'

      # query parameters
      query_params = {}
      query_params[:'locationId'] = opts[:'location_id'] if !opts[:'location_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseString')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingApi#setting_get_currency_symbol\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :location_id 
    # @option opts [String] :authorization {token_type} {access_token}
    # @return [ResponseDateTime]
    def setting_get_location_current_date_time(opts = {})
      data, _status_code, _headers = setting_get_location_current_date_time_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :location_id 
    # @option opts [String] :authorization {token_type} {access_token}
    # @return [Array<(ResponseDateTime, Fixnum, Hash)>] ResponseDateTime data, response status code and response headers
    def setting_get_location_current_date_time_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingApi.setting_get_location_current_date_time ...'
      end
      # resource path
      local_var_path = '/api/Setting/GetLocationCurrentDateTime'

      # query parameters
      query_params = {}
      query_params[:'locationId'] = opts[:'location_id'] if !opts[:'location_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseDateTime')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingApi#setting_get_location_current_date_time\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :location_id 
    # @option opts [String] :authorization {token_type} {access_token}
    # @return [ResponseLocationPublicSettingDTO]
    def setting_get_location_public_setting(opts = {})
      data, _status_code, _headers = setting_get_location_public_setting_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :location_id 
    # @option opts [String] :authorization {token_type} {access_token}
    # @return [Array<(ResponseLocationPublicSettingDTO, Fixnum, Hash)>] ResponseLocationPublicSettingDTO data, response status code and response headers
    def setting_get_location_public_setting_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingApi.setting_get_location_public_setting ...'
      end
      # resource path
      local_var_path = '/api/Setting/GetLocationPublicSetting'

      # query parameters
      query_params = {}
      query_params[:'locationId'] = opts[:'location_id'] if !opts[:'location_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseLocationPublicSettingDTO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingApi#setting_get_location_public_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :location_id 
    # @option opts [String] :authorization {token_type} {access_token}
    # @return [ResponseInt32]
    def setting_get_minimum_age(opts = {})
      data, _status_code, _headers = setting_get_minimum_age_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :location_id 
    # @option opts [String] :authorization {token_type} {access_token}
    # @return [Array<(ResponseInt32, Fixnum, Hash)>] ResponseInt32 data, response status code and response headers
    def setting_get_minimum_age_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingApi.setting_get_minimum_age ...'
      end
      # resource path
      local_var_path = '/api/Setting/GetMinimumAge'

      # query parameters
      query_params = {}
      query_params[:'locationId'] = opts[:'location_id'] if !opts[:'location_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseInt32')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingApi#setting_get_minimum_age\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization {token_type} {access_token}
    # @return [ResponseListPayMethodDTO]
    def setting_get_pay_methods(opts = {})
      data, _status_code, _headers = setting_get_pay_methods_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization {token_type} {access_token}
    # @return [Array<(ResponseListPayMethodDTO, Fixnum, Hash)>] ResponseListPayMethodDTO data, response status code and response headers
    def setting_get_pay_methods_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingApi.setting_get_pay_methods ...'
      end
      # resource path
      local_var_path = '/api/Setting/GetPayMethods'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseListPayMethodDTO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingApi#setting_get_pay_methods\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param location_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization {token_type} {access_token}
    # @return [ResponseSelfServiceCarRentalSetupDTO]
    def setting_get_self_service_car_rental_setup(location_id, opts = {})
      data, _status_code, _headers = setting_get_self_service_car_rental_setup_with_http_info(location_id, opts)
      data
    end

    # @param location_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization {token_type} {access_token}
    # @return [Array<(ResponseSelfServiceCarRentalSetupDTO, Fixnum, Hash)>] ResponseSelfServiceCarRentalSetupDTO data, response status code and response headers
    def setting_get_self_service_car_rental_setup_with_http_info(location_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingApi.setting_get_self_service_car_rental_setup ...'
      end
      # verify the required parameter 'location_id' is set
      if @api_client.config.client_side_validation && location_id.nil?
        fail ArgumentError, "Missing the required parameter 'location_id' when calling SettingApi.setting_get_self_service_car_rental_setup"
      end
      # resource path
      local_var_path = '/api/Setting/GetSelfServiceCarRentalSetup'

      # query parameters
      query_params = {}
      query_params[:'locationId'] = location_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseSelfServiceCarRentalSetupDTO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingApi#setting_get_self_service_car_rental_setup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization {token_type} {access_token}
    # @return [ResponseListStateDTO]
    def setting_get_states(opts = {})
      data, _status_code, _headers = setting_get_states_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization {token_type} {access_token}
    # @return [Array<(ResponseListStateDTO, Fixnum, Hash)>] ResponseListStateDTO data, response status code and response headers
    def setting_get_states_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingApi.setting_get_states ...'
      end
      # resource path
      local_var_path = '/api/Setting/GetStates'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseListStateDTO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingApi#setting_get_states\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization {token_type} {access_token}
    # @return [ResponseBoolean]
    def setting_is_system_under_maintenance(opts = {})
      data, _status_code, _headers = setting_is_system_under_maintenance_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization {token_type} {access_token}
    # @return [Array<(ResponseBoolean, Fixnum, Hash)>] ResponseBoolean data, response status code and response headers
    def setting_is_system_under_maintenance_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingApi.setting_is_system_under_maintenance ...'
      end
      # resource path
      local_var_path = '/api/Setting/IsSystemUnderMaintenance'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseBoolean')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingApi#setting_is_system_under_maintenance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
