=begin
#V4 Online API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v4

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15

=end

require 'uri'

module RentCentric
  class LocationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization {token_type} {access_token}
    # @return [ResponseListLocationDTO]
    def location_get_locations(opts = {})
      data, _status_code, _headers = location_get_locations_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization {token_type} {access_token}
    # @return [Array<(ResponseListLocationDTO, Fixnum, Hash)>] ResponseListLocationDTO data, response status code and response headers
    def location_get_locations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LocationApi.location_get_locations ...'
      end
      # resource path
      local_var_path = '/api/Location/GetLocations'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseListLocationDTO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LocationApi#location_get_locations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param latitude 
    # @param longitude 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization {token_type} {access_token}
    # @return [ResponseLocationDTO]
    def location_get_nearest_location(latitude, longitude, opts = {})
      data, _status_code, _headers = location_get_nearest_location_with_http_info(latitude, longitude, opts)
      data
    end

    # @param latitude 
    # @param longitude 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization {token_type} {access_token}
    # @return [Array<(ResponseLocationDTO, Fixnum, Hash)>] ResponseLocationDTO data, response status code and response headers
    def location_get_nearest_location_with_http_info(latitude, longitude, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LocationApi.location_get_nearest_location ...'
      end
      # verify the required parameter 'latitude' is set
      if @api_client.config.client_side_validation && latitude.nil?
        fail ArgumentError, "Missing the required parameter 'latitude' when calling LocationApi.location_get_nearest_location"
      end
      # verify the required parameter 'longitude' is set
      if @api_client.config.client_side_validation && longitude.nil?
        fail ArgumentError, "Missing the required parameter 'longitude' when calling LocationApi.location_get_nearest_location"
      end
      # resource path
      local_var_path = '/api/Location/GetNearestLocation'

      # query parameters
      query_params = {}
      query_params[:'latitude'] = latitude
      query_params[:'longitude'] = longitude

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseLocationDTO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LocationApi#location_get_nearest_location\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization {token_type} {access_token}
    # @return [ResponseListLocationDTO]
    def location_get_offsite_locations(opts = {})
      data, _status_code, _headers = location_get_offsite_locations_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization {token_type} {access_token}
    # @return [Array<(ResponseListLocationDTO, Fixnum, Hash)>] ResponseListLocationDTO data, response status code and response headers
    def location_get_offsite_locations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LocationApi.location_get_offsite_locations ...'
      end
      # resource path
      local_var_path = '/api/Location/GetOffsiteLocations'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseListLocationDTO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LocationApi#location_get_offsite_locations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization {token_type} {access_token}
    # @return [ResponseListOneWayLocation]
    def location_get_one_way_locations(opts = {})
      data, _status_code, _headers = location_get_one_way_locations_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization {token_type} {access_token}
    # @return [Array<(ResponseListOneWayLocation, Fixnum, Hash)>] ResponseListOneWayLocation data, response status code and response headers
    def location_get_one_way_locations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LocationApi.location_get_one_way_locations ...'
      end
      # resource path
      local_var_path = '/api/Location/GetOneWayLocations'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseListOneWayLocation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LocationApi#location_get_one_way_locations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization {token_type} {access_token}
    # @return [ResponseListOneWayLocation]
    def location_get_one_way_offsite_locations(opts = {})
      data, _status_code, _headers = location_get_one_way_offsite_locations_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization {token_type} {access_token}
    # @return [Array<(ResponseListOneWayLocation, Fixnum, Hash)>] ResponseListOneWayLocation data, response status code and response headers
    def location_get_one_way_offsite_locations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LocationApi.location_get_one_way_offsite_locations ...'
      end
      # resource path
      local_var_path = '/api/Location/GetOneWayOffsiteLocations'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseListOneWayLocation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LocationApi#location_get_one_way_offsite_locations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization {token_type} {access_token}
    # @return [ResponseListOneWayLocation]
    def location_get_one_way_parent_locations(opts = {})
      data, _status_code, _headers = location_get_one_way_parent_locations_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization {token_type} {access_token}
    # @return [Array<(ResponseListOneWayLocation, Fixnum, Hash)>] ResponseListOneWayLocation data, response status code and response headers
    def location_get_one_way_parent_locations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LocationApi.location_get_one_way_parent_locations ...'
      end
      # resource path
      local_var_path = '/api/Location/GetOneWayParentLocations'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseListOneWayLocation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LocationApi#location_get_one_way_parent_locations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization {token_type} {access_token}
    # @return [ResponseListLocationDTO]
    def location_get_parent_locations(opts = {})
      data, _status_code, _headers = location_get_parent_locations_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization {token_type} {access_token}
    # @return [Array<(ResponseListLocationDTO, Fixnum, Hash)>] ResponseListLocationDTO data, response status code and response headers
    def location_get_parent_locations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LocationApi.location_get_parent_locations ...'
      end
      # resource path
      local_var_path = '/api/Location/GetParentLocations'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseListLocationDTO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LocationApi#location_get_parent_locations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param location_id 
    # @param dt_value 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization {token_type} {access_token}
    # @return [ResponseBoolean]
    def location_is_location_open(location_id, dt_value, opts = {})
      data, _status_code, _headers = location_is_location_open_with_http_info(location_id, dt_value, opts)
      data
    end

    # @param location_id 
    # @param dt_value 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization {token_type} {access_token}
    # @return [Array<(ResponseBoolean, Fixnum, Hash)>] ResponseBoolean data, response status code and response headers
    def location_is_location_open_with_http_info(location_id, dt_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LocationApi.location_is_location_open ...'
      end
      # verify the required parameter 'location_id' is set
      if @api_client.config.client_side_validation && location_id.nil?
        fail ArgumentError, "Missing the required parameter 'location_id' when calling LocationApi.location_is_location_open"
      end
      # verify the required parameter 'dt_value' is set
      if @api_client.config.client_side_validation && dt_value.nil?
        fail ArgumentError, "Missing the required parameter 'dt_value' when calling LocationApi.location_is_location_open"
      end
      # resource path
      local_var_path = '/api/Location/IsLocationOpen'

      # query parameters
      query_params = {}
      query_params[:'locationId'] = location_id
      query_params[:'dtValue'] = dt_value

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      header_params[:'Authorization'] = opts[:'authorization'] if !opts[:'authorization'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseBoolean')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LocationApi#location_is_location_open\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
