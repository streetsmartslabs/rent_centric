=begin
#V4 Online API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v4

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15

=end

require 'date'

module RentCentric
  class GetQuoteCalculateRequest
    attr_accessor :location_id

    attr_accessor :vehicle_type_id

    attr_accessor :vehicle_id

    attr_accessor :customer_id

    attr_accessor :pick_up_date_time

    attr_accessor :drop_off_date_time

    attr_accessor :reservation_id

    attr_accessor :rental_id

    attr_accessor :offsite_location_id

    attr_accessor :res_number

    attr_accessor :promo_code_id

    attr_accessor :promo_code

    attr_accessor :rate_id

    attr_accessor :load_default_add_ons

    attr_accessor :insurance_id_list

    attr_accessor :misc_charge_id_list

    attr_accessor :tax_id_list

    attr_accessor :rate_values

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'location_id' => :'LocationId',
        :'vehicle_type_id' => :'VehicleTypeId',
        :'vehicle_id' => :'VehicleId',
        :'customer_id' => :'CustomerId',
        :'pick_up_date_time' => :'PickUpDateTime',
        :'drop_off_date_time' => :'DropOffDateTime',
        :'reservation_id' => :'ReservationId',
        :'rental_id' => :'RentalId',
        :'offsite_location_id' => :'OffsiteLocationId',
        :'res_number' => :'ResNumber',
        :'promo_code_id' => :'PromoCodeId',
        :'promo_code' => :'PromoCode',
        :'rate_id' => :'RateId',
        :'load_default_add_ons' => :'LoadDefaultAddOns',
        :'insurance_id_list' => :'InsuranceIdList',
        :'misc_charge_id_list' => :'MiscChargeIdList',
        :'tax_id_list' => :'TaxIdList',
        :'rate_values' => :'RateValues'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'location_id' => :'Integer',
        :'vehicle_type_id' => :'Integer',
        :'vehicle_id' => :'Integer',
        :'customer_id' => :'Integer',
        :'pick_up_date_time' => :'DateTime',
        :'drop_off_date_time' => :'DateTime',
        :'reservation_id' => :'Integer',
        :'rental_id' => :'Integer',
        :'offsite_location_id' => :'Integer',
        :'res_number' => :'String',
        :'promo_code_id' => :'Integer',
        :'promo_code' => :'String',
        :'rate_id' => :'Integer',
        :'load_default_add_ons' => :'BOOLEAN',
        :'insurance_id_list' => :'Array<Integer>',
        :'misc_charge_id_list' => :'Array<Integer>',
        :'tax_id_list' => :'Array<Integer>',
        :'rate_values' => :'RateValues'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'LocationId')
        self.location_id = attributes[:'LocationId']
      end

      if attributes.has_key?(:'VehicleTypeId')
        self.vehicle_type_id = attributes[:'VehicleTypeId']
      end

      if attributes.has_key?(:'VehicleId')
        self.vehicle_id = attributes[:'VehicleId']
      end

      if attributes.has_key?(:'CustomerId')
        self.customer_id = attributes[:'CustomerId']
      end

      if attributes.has_key?(:'PickUpDateTime')
        self.pick_up_date_time = attributes[:'PickUpDateTime']
      end

      if attributes.has_key?(:'DropOffDateTime')
        self.drop_off_date_time = attributes[:'DropOffDateTime']
      end

      if attributes.has_key?(:'ReservationId')
        self.reservation_id = attributes[:'ReservationId']
      end

      if attributes.has_key?(:'RentalId')
        self.rental_id = attributes[:'RentalId']
      end

      if attributes.has_key?(:'OffsiteLocationId')
        self.offsite_location_id = attributes[:'OffsiteLocationId']
      end

      if attributes.has_key?(:'ResNumber')
        self.res_number = attributes[:'ResNumber']
      end

      if attributes.has_key?(:'PromoCodeId')
        self.promo_code_id = attributes[:'PromoCodeId']
      end

      if attributes.has_key?(:'PromoCode')
        self.promo_code = attributes[:'PromoCode']
      end

      if attributes.has_key?(:'RateId')
        self.rate_id = attributes[:'RateId']
      end

      if attributes.has_key?(:'LoadDefaultAddOns')
        self.load_default_add_ons = attributes[:'LoadDefaultAddOns']
      end

      if attributes.has_key?(:'InsuranceIdList')
        if (value = attributes[:'InsuranceIdList']).is_a?(Array)
          self.insurance_id_list = value
        end
      end

      if attributes.has_key?(:'MiscChargeIdList')
        if (value = attributes[:'MiscChargeIdList']).is_a?(Array)
          self.misc_charge_id_list = value
        end
      end

      if attributes.has_key?(:'TaxIdList')
        if (value = attributes[:'TaxIdList']).is_a?(Array)
          self.tax_id_list = value
        end
      end

      if attributes.has_key?(:'RateValues')
        self.rate_values = attributes[:'RateValues']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          location_id == o.location_id &&
          vehicle_type_id == o.vehicle_type_id &&
          vehicle_id == o.vehicle_id &&
          customer_id == o.customer_id &&
          pick_up_date_time == o.pick_up_date_time &&
          drop_off_date_time == o.drop_off_date_time &&
          reservation_id == o.reservation_id &&
          rental_id == o.rental_id &&
          offsite_location_id == o.offsite_location_id &&
          res_number == o.res_number &&
          promo_code_id == o.promo_code_id &&
          promo_code == o.promo_code &&
          rate_id == o.rate_id &&
          load_default_add_ons == o.load_default_add_ons &&
          insurance_id_list == o.insurance_id_list &&
          misc_charge_id_list == o.misc_charge_id_list &&
          tax_id_list == o.tax_id_list &&
          rate_values == o.rate_values
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [location_id, vehicle_type_id, vehicle_id, customer_id, pick_up_date_time, drop_off_date_time, reservation_id, rental_id, offsite_location_id, res_number, promo_code_id, promo_code, rate_id, load_default_add_ons, insurance_id_list, misc_charge_id_list, tax_id_list, rate_values].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        split_vals = value.split('/')
        value = [split_vals[1], split_vals[0], split_vals[2..split_vals.length - 1]].join('/') + ' ' + RentCentric.configure.timezone_abbr
        DateTime.parse(value)
      when :Date
        split_vals = value.split('/')
        value = [split_vals[1], split_vals[0], split_vals[2..split_vals.length - 1]].join('/') + ' ' + RentCentric.configure.timezone_abbr
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = RentCentric.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
