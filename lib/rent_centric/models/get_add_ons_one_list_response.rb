=begin
#V4 Online API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v4

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15

=end

require 'date'

module RentCentric
  class GetAddOnsOneListResponse
    attr_accessor :addon_name

    attr_accessor :addon_type

    attr_accessor :addon_code

    attr_accessor :addon_id

    attr_accessor :hourly_rate

    attr_accessor :daily_rate

    attr_accessor :is_default

    attr_accessor :is_default_on_self_service

    attr_accessor :rate

    attr_accessor :calculation_type

    attr_accessor :memo

    attr_accessor :is_mandatory

    attr_accessor :option_group

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'addon_name' => :'AddonName',
        :'addon_type' => :'AddonType',
        :'addon_code' => :'AddonCode',
        :'addon_id' => :'AddonId',
        :'hourly_rate' => :'HourlyRate',
        :'daily_rate' => :'DailyRate',
        :'is_default' => :'IsDefault',
        :'is_default_on_self_service' => :'IsDefaultOnSelfService',
        :'rate' => :'Rate',
        :'calculation_type' => :'CalculationType',
        :'memo' => :'Memo',
        :'is_mandatory' => :'IsMandatory',
        :'option_group' => :'OptionGroup'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'addon_name' => :'String',
        :'addon_type' => :'String',
        :'addon_code' => :'String',
        :'addon_id' => :'Integer',
        :'hourly_rate' => :'Float',
        :'daily_rate' => :'Float',
        :'is_default' => :'BOOLEAN',
        :'is_default_on_self_service' => :'BOOLEAN',
        :'rate' => :'Float',
        :'calculation_type' => :'String',
        :'memo' => :'String',
        :'is_mandatory' => :'BOOLEAN',
        :'option_group' => :'OptionGroupDTO'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'AddonName')
        self.addon_name = attributes[:'AddonName']
      end

      if attributes.has_key?(:'AddonType')
        self.addon_type = attributes[:'AddonType']
      end

      if attributes.has_key?(:'AddonCode')
        self.addon_code = attributes[:'AddonCode']
      end

      if attributes.has_key?(:'AddonId')
        self.addon_id = attributes[:'AddonId']
      end

      if attributes.has_key?(:'HourlyRate')
        self.hourly_rate = attributes[:'HourlyRate']
      end

      if attributes.has_key?(:'DailyRate')
        self.daily_rate = attributes[:'DailyRate']
      end

      if attributes.has_key?(:'IsDefault')
        self.is_default = attributes[:'IsDefault']
      end

      if attributes.has_key?(:'IsDefaultOnSelfService')
        self.is_default_on_self_service = attributes[:'IsDefaultOnSelfService']
      end

      if attributes.has_key?(:'Rate')
        self.rate = attributes[:'Rate']
      end

      if attributes.has_key?(:'CalculationType')
        self.calculation_type = attributes[:'CalculationType']
      end

      if attributes.has_key?(:'Memo')
        self.memo = attributes[:'Memo']
      end

      if attributes.has_key?(:'IsMandatory')
        self.is_mandatory = attributes[:'IsMandatory']
      end

      if attributes.has_key?(:'OptionGroup')
        self.option_group = attributes[:'OptionGroup']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          addon_name == o.addon_name &&
          addon_type == o.addon_type &&
          addon_code == o.addon_code &&
          addon_id == o.addon_id &&
          hourly_rate == o.hourly_rate &&
          daily_rate == o.daily_rate &&
          is_default == o.is_default &&
          is_default_on_self_service == o.is_default_on_self_service &&
          rate == o.rate &&
          calculation_type == o.calculation_type &&
          memo == o.memo &&
          is_mandatory == o.is_mandatory &&
          option_group == o.option_group
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [addon_name, addon_type, addon_code, addon_id, hourly_rate, daily_rate, is_default, is_default_on_self_service, rate, calculation_type, memo, is_mandatory, option_group].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        split_vals = value.split('/')
        value = [split_vals[1], split_vals[0], split_vals[2..split_vals.length - 1]].join('/') + ' ' + RentCentric.configure.timezone_abbr
        DateTime.parse(value)
      when :Date
        split_vals = value.split('/')
        value = [split_vals[1], split_vals[0], split_vals[2..split_vals.length - 1]].join('/') + ' ' + RentCentric.configure.timezone_abbr
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = RentCentric.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
