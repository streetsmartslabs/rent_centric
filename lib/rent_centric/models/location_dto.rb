=begin
#V4 Online API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v4

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15

=end

require 'date'

module RentCentric
  class LocationDTO
    attr_accessor :location_id

    attr_accessor :location_name

    attr_accessor :location_address

    attr_accessor :location_city

    attr_accessor :location_state

    attr_accessor :location_country

    attr_accessor :location_phone

    attr_accessor :location_zip

    attr_accessor :location_image

    attr_accessor :location_description

    attr_accessor :is_offsite_location

    attr_accessor :owning_location_id

    attr_accessor :region_id

    attr_accessor :location_email

    attr_accessor :city_supported_name

    attr_accessor :location_current_date_time

    attr_accessor :location_point

    attr_accessor :location_boundary1

    attr_accessor :location_boundary2

    attr_accessor :location_boundary3

    attr_accessor :location_boundary4

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'location_id' => :'LocationId',
        :'location_name' => :'LocationName',
        :'location_address' => :'LocationAddress',
        :'location_city' => :'LocationCity',
        :'location_state' => :'LocationState',
        :'location_country' => :'LocationCountry',
        :'location_phone' => :'LocationPhone',
        :'location_zip' => :'LocationZip',
        :'location_image' => :'LocationImage',
        :'location_description' => :'LocationDescription',
        :'is_offsite_location' => :'IsOffsiteLocation',
        :'owning_location_id' => :'OwningLocationId',
        :'region_id' => :'RegionId',
        :'location_email' => :'LocationEmail',
        :'city_supported_name' => :'CitySupportedName',
        :'location_current_date_time' => :'LocationCurrentDateTime',
        :'location_point' => :'LocationPoint',
        :'location_boundary1' => :'LocationBoundary1',
        :'location_boundary2' => :'LocationBoundary2',
        :'location_boundary3' => :'LocationBoundary3',
        :'location_boundary4' => :'LocationBoundary4'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'location_id' => :'Integer',
        :'location_name' => :'String',
        :'location_address' => :'String',
        :'location_city' => :'String',
        :'location_state' => :'String',
        :'location_country' => :'String',
        :'location_phone' => :'String',
        :'location_zip' => :'String',
        :'location_image' => :'String',
        :'location_description' => :'String',
        :'is_offsite_location' => :'BOOLEAN',
        :'owning_location_id' => :'Integer',
        :'region_id' => :'Integer',
        :'location_email' => :'String',
        :'city_supported_name' => :'String',
        :'location_current_date_time' => :'DateTime',
        :'location_point' => :'MapPoint',
        :'location_boundary1' => :'MapPoint',
        :'location_boundary2' => :'MapPoint',
        :'location_boundary3' => :'MapPoint',
        :'location_boundary4' => :'MapPoint'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'LocationId')
        self.location_id = attributes[:'LocationId']
      end

      if attributes.has_key?(:'LocationName')
        self.location_name = attributes[:'LocationName']
      end

      if attributes.has_key?(:'LocationAddress')
        self.location_address = attributes[:'LocationAddress']
      end

      if attributes.has_key?(:'LocationCity')
        self.location_city = attributes[:'LocationCity']
      end

      if attributes.has_key?(:'LocationState')
        self.location_state = attributes[:'LocationState']
      end

      if attributes.has_key?(:'LocationCountry')
        self.location_country = attributes[:'LocationCountry']
      end

      if attributes.has_key?(:'LocationPhone')
        self.location_phone = attributes[:'LocationPhone']
      end

      if attributes.has_key?(:'LocationZip')
        self.location_zip = attributes[:'LocationZip']
      end

      if attributes.has_key?(:'LocationImage')
        self.location_image = attributes[:'LocationImage']
      end

      if attributes.has_key?(:'LocationDescription')
        self.location_description = attributes[:'LocationDescription']
      end

      if attributes.has_key?(:'IsOffsiteLocation')
        self.is_offsite_location = attributes[:'IsOffsiteLocation']
      end

      if attributes.has_key?(:'OwningLocationId')
        self.owning_location_id = attributes[:'OwningLocationId']
      end

      if attributes.has_key?(:'RegionId')
        self.region_id = attributes[:'RegionId']
      end

      if attributes.has_key?(:'LocationEmail')
        self.location_email = attributes[:'LocationEmail']
      end

      if attributes.has_key?(:'CitySupportedName')
        self.city_supported_name = attributes[:'CitySupportedName']
      end

      if attributes.has_key?(:'LocationCurrentDateTime')
        self.location_current_date_time = attributes[:'LocationCurrentDateTime']
      end

      if attributes.has_key?(:'LocationPoint')
        self.location_point = attributes[:'LocationPoint']
      end

      if attributes.has_key?(:'LocationBoundary1')
        self.location_boundary1 = attributes[:'LocationBoundary1']
      end

      if attributes.has_key?(:'LocationBoundary2')
        self.location_boundary2 = attributes[:'LocationBoundary2']
      end

      if attributes.has_key?(:'LocationBoundary3')
        self.location_boundary3 = attributes[:'LocationBoundary3']
      end

      if attributes.has_key?(:'LocationBoundary4')
        self.location_boundary4 = attributes[:'LocationBoundary4']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          location_id == o.location_id &&
          location_name == o.location_name &&
          location_address == o.location_address &&
          location_city == o.location_city &&
          location_state == o.location_state &&
          location_country == o.location_country &&
          location_phone == o.location_phone &&
          location_zip == o.location_zip &&
          location_image == o.location_image &&
          location_description == o.location_description &&
          is_offsite_location == o.is_offsite_location &&
          owning_location_id == o.owning_location_id &&
          region_id == o.region_id &&
          location_email == o.location_email &&
          city_supported_name == o.city_supported_name &&
          location_current_date_time == o.location_current_date_time &&
          location_point == o.location_point &&
          location_boundary1 == o.location_boundary1 &&
          location_boundary2 == o.location_boundary2 &&
          location_boundary3 == o.location_boundary3 &&
          location_boundary4 == o.location_boundary4
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [location_id, location_name, location_address, location_city, location_state, location_country, location_phone, location_zip, location_image, location_description, is_offsite_location, owning_location_id, region_id, location_email, city_supported_name, location_current_date_time, location_point, location_boundary1, location_boundary2, location_boundary3, location_boundary4].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = RentCentric.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
