=begin
#V4 Online API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v4

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15

=end

require 'date'

module RentCentric
  class VehicleDTO
    attr_accessor :vehicle_id

    attr_accessor :assigned_id

    attr_accessor :make_name

    attr_accessor :model_name

    attr_accessor :vehicle_name

    attr_accessor :vehicle_odometer

    attr_accessor :fuel_level

    attr_accessor :vehicle_image

    attr_accessor :licenser_number

    attr_accessor :year_made

    attr_accessor :vehicle_description

    attr_accessor :number_of_seats

    attr_accessor :color

    attr_accessor :date_entered

    attr_accessor :plate_number

    attr_accessor :vehicle_calendar

    attr_accessor :transmission

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'vehicle_id' => :'VehicleId',
        :'assigned_id' => :'AssignedId',
        :'make_name' => :'MakeName',
        :'model_name' => :'ModelName',
        :'vehicle_name' => :'VehicleName',
        :'vehicle_odometer' => :'VehicleOdometer',
        :'fuel_level' => :'FuelLevel',
        :'vehicle_image' => :'VehicleImage',
        :'licenser_number' => :'LicenserNumber',
        :'year_made' => :'YearMade',
        :'vehicle_description' => :'VehicleDescription',
        :'number_of_seats' => :'NumberOfSeats',
        :'color' => :'color',
        :'date_entered' => :'DateEntered',
        :'plate_number' => :'PlateNumber',
        :'vehicle_calendar' => :'VehicleCalendar',
        :'transmission' => :'Transmission'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'vehicle_id' => :'Integer',
        :'assigned_id' => :'String',
        :'make_name' => :'String',
        :'model_name' => :'String',
        :'vehicle_name' => :'String',
        :'vehicle_odometer' => :'Integer',
        :'fuel_level' => :'String',
        :'vehicle_image' => :'String',
        :'licenser_number' => :'String',
        :'year_made' => :'String',
        :'vehicle_description' => :'String',
        :'number_of_seats' => :'String',
        :'color' => :'String',
        :'date_entered' => :'DateTime',
        :'plate_number' => :'String',
        :'vehicle_calendar' => :'String',
        :'transmission' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'VehicleId')
        self.vehicle_id = attributes[:'VehicleId']
      end

      if attributes.has_key?(:'AssignedId')
        self.assigned_id = attributes[:'AssignedId']
      end

      if attributes.has_key?(:'MakeName')
        self.make_name = attributes[:'MakeName']
      end

      if attributes.has_key?(:'ModelName')
        self.model_name = attributes[:'ModelName']
      end

      if attributes.has_key?(:'VehicleName')
        self.vehicle_name = attributes[:'VehicleName']
      end

      if attributes.has_key?(:'VehicleOdometer')
        self.vehicle_odometer = attributes[:'VehicleOdometer']
      end

      if attributes.has_key?(:'FuelLevel')
        self.fuel_level = attributes[:'FuelLevel']
      end

      if attributes.has_key?(:'VehicleImage')
        self.vehicle_image = attributes[:'VehicleImage']
      end

      if attributes.has_key?(:'LicenserNumber')
        self.licenser_number = attributes[:'LicenserNumber']
      end

      if attributes.has_key?(:'YearMade')
        self.year_made = attributes[:'YearMade']
      end

      if attributes.has_key?(:'VehicleDescription')
        self.vehicle_description = attributes[:'VehicleDescription']
      end

      if attributes.has_key?(:'NumberOfSeats')
        self.number_of_seats = attributes[:'NumberOfSeats']
      end

      if attributes.has_key?(:'color')
        self.color = attributes[:'color']
      end

      if attributes.has_key?(:'DateEntered')
        self.date_entered = attributes[:'DateEntered']
      end

      if attributes.has_key?(:'PlateNumber')
        self.plate_number = attributes[:'PlateNumber']
      end

      if attributes.has_key?(:'VehicleCalendar')
        self.vehicle_calendar = attributes[:'VehicleCalendar']
      end

      if attributes.has_key?(:'Transmission')
        self.transmission = attributes[:'Transmission']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          vehicle_id == o.vehicle_id &&
          assigned_id == o.assigned_id &&
          make_name == o.make_name &&
          model_name == o.model_name &&
          vehicle_name == o.vehicle_name &&
          vehicle_odometer == o.vehicle_odometer &&
          fuel_level == o.fuel_level &&
          vehicle_image == o.vehicle_image &&
          licenser_number == o.licenser_number &&
          year_made == o.year_made &&
          vehicle_description == o.vehicle_description &&
          number_of_seats == o.number_of_seats &&
          color == o.color &&
          date_entered == o.date_entered &&
          plate_number == o.plate_number &&
          vehicle_calendar == o.vehicle_calendar &&
          transmission == o.transmission
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [vehicle_id, assigned_id, make_name, model_name, vehicle_name, vehicle_odometer, fuel_level, vehicle_image, licenser_number, year_made, vehicle_description, number_of_seats, color, date_entered, plate_number, vehicle_calendar, transmission].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        split_vals = value.split('/')
        value = [split_vals[1], split_vals[0], split_vals[2..split_vals.length - 1]].join('/') + ' ' + RentCentric.configure.timezone_abbr
        DateTime.parse(value)
      when :Date
        split_vals = value.split('/')
        value = [split_vals[1], split_vals[0], split_vals[2..split_vals.length - 1]].join('/') + ' ' + RentCentric.configure.timezone_abbr
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = RentCentric.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
