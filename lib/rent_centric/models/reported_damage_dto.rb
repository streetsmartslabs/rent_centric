=begin
#V4 Online API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v4

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15

=end

require 'date'

module RentCentric
  class ReportedDamageDTO
    attr_accessor :reported_damage_id

    attr_accessor :customer_id

    attr_accessor :vehicle_id

    attr_accessor :damage_description

    attr_accessor :date_entered

    attr_accessor :reservation_id

    attr_accessor :agreement_id

    attr_accessor :admin_id

    attr_accessor :latitude

    attr_accessor :longitude

    attr_accessor :ip_address

    attr_accessor :is_checked

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'reported_damage_id' => :'ReportedDamageID',
        :'customer_id' => :'CustomerID',
        :'vehicle_id' => :'VehicleID',
        :'damage_description' => :'DamageDescription',
        :'date_entered' => :'DateEntered',
        :'reservation_id' => :'ReservationID',
        :'agreement_id' => :'AgreementID',
        :'admin_id' => :'AdminID',
        :'latitude' => :'latitude',
        :'longitude' => :'longitude',
        :'ip_address' => :'IPAddress',
        :'is_checked' => :'IsChecked'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'reported_damage_id' => :'Integer',
        :'customer_id' => :'Integer',
        :'vehicle_id' => :'Integer',
        :'damage_description' => :'String',
        :'date_entered' => :'DateTime',
        :'reservation_id' => :'Integer',
        :'agreement_id' => :'Integer',
        :'admin_id' => :'String',
        :'latitude' => :'String',
        :'longitude' => :'String',
        :'ip_address' => :'String',
        :'is_checked' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'ReportedDamageID')
        self.reported_damage_id = attributes[:'ReportedDamageID']
      end

      if attributes.has_key?(:'CustomerID')
        self.customer_id = attributes[:'CustomerID']
      end

      if attributes.has_key?(:'VehicleID')
        self.vehicle_id = attributes[:'VehicleID']
      end

      if attributes.has_key?(:'DamageDescription')
        self.damage_description = attributes[:'DamageDescription']
      end

      if attributes.has_key?(:'DateEntered')
        self.date_entered = attributes[:'DateEntered']
      end

      if attributes.has_key?(:'ReservationID')
        self.reservation_id = attributes[:'ReservationID']
      end

      if attributes.has_key?(:'AgreementID')
        self.agreement_id = attributes[:'AgreementID']
      end

      if attributes.has_key?(:'AdminID')
        self.admin_id = attributes[:'AdminID']
      end

      if attributes.has_key?(:'latitude')
        self.latitude = attributes[:'latitude']
      end

      if attributes.has_key?(:'longitude')
        self.longitude = attributes[:'longitude']
      end

      if attributes.has_key?(:'IPAddress')
        self.ip_address = attributes[:'IPAddress']
      end

      if attributes.has_key?(:'IsChecked')
        self.is_checked = attributes[:'IsChecked']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          reported_damage_id == o.reported_damage_id &&
          customer_id == o.customer_id &&
          vehicle_id == o.vehicle_id &&
          damage_description == o.damage_description &&
          date_entered == o.date_entered &&
          reservation_id == o.reservation_id &&
          agreement_id == o.agreement_id &&
          admin_id == o.admin_id &&
          latitude == o.latitude &&
          longitude == o.longitude &&
          ip_address == o.ip_address &&
          is_checked == o.is_checked
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [reported_damage_id, customer_id, vehicle_id, damage_description, date_entered, reservation_id, agreement_id, admin_id, latitude, longitude, ip_address, is_checked].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        split_vals = value.split('/')
        value = [split_vals[1], split_vals[0], split_vals[2..split_vals.length - 1]].join('/')
        DateTime.parse(value)
      when :Date
        split_vals = value.split('/')
        value = [split_vals[1], split_vals[0], split_vals[2..split_vals.length - 1]].join('/')
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = RentCentric.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
