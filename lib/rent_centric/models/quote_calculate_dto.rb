=begin
#V4 Online API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v4

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15

=end

require 'date'

module RentCentric
  class QuoteCalculateDTO
    attr_accessor :rate_id

    attr_accessor :is_company_rate

    attr_accessor :daily_rate

    attr_accessor :hourly_rate

    attr_accessor :weekly_rate

    attr_accessor :monthly_rate

    attr_accessor :km_exceed_rate

    attr_accessor :included_mileage

    attr_accessor :hourly_rate_with_taxes

    attr_accessor :daily_rate_with_taxes

    attr_accessor :weekly_rate_with_taxes

    attr_accessor :monthly_rate_with_taxes

    attr_accessor :quote_calculate_charge

    attr_accessor :charge_summary

    attr_accessor :charge_summary_dto

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'rate_id' => :'RateId',
        :'is_company_rate' => :'IsCompanyRate',
        :'daily_rate' => :'DailyRate',
        :'hourly_rate' => :'HourlyRate',
        :'weekly_rate' => :'WeeklyRate',
        :'monthly_rate' => :'MonthlyRate',
        :'km_exceed_rate' => :'KmExceedRate',
        :'included_mileage' => :'IncludedMileage',
        :'hourly_rate_with_taxes' => :'HourlyRateWithTaxes',
        :'daily_rate_with_taxes' => :'DailyRateWithTaxes',
        :'weekly_rate_with_taxes' => :'WeeklyRateWithTaxes',
        :'monthly_rate_with_taxes' => :'MonthlyRateWithTaxes',
        :'quote_calculate_charge' => :'QuoteCalculateCharge',
        :'charge_summary' => :'ChargeSummary',
        :'charge_summary_dto' => :'ChargeSummaryDTO'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'rate_id' => :'Integer',
        :'is_company_rate' => :'BOOLEAN',
        :'daily_rate' => :'Float',
        :'hourly_rate' => :'Float',
        :'weekly_rate' => :'Float',
        :'monthly_rate' => :'Float',
        :'km_exceed_rate' => :'Float',
        :'included_mileage' => :'Float',
        :'hourly_rate_with_taxes' => :'Float',
        :'daily_rate_with_taxes' => :'Float',
        :'weekly_rate_with_taxes' => :'Float',
        :'monthly_rate_with_taxes' => :'Float',
        :'quote_calculate_charge' => :'QuoteCalculateCharge',
        :'charge_summary' => :'String',
        :'charge_summary_dto' => :'Array<ChargeSummaryDTO>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'RateId')
        self.rate_id = attributes[:'RateId']
      end

      if attributes.has_key?(:'IsCompanyRate')
        self.is_company_rate = attributes[:'IsCompanyRate']
      end

      if attributes.has_key?(:'DailyRate')
        self.daily_rate = attributes[:'DailyRate']
      end

      if attributes.has_key?(:'HourlyRate')
        self.hourly_rate = attributes[:'HourlyRate']
      end

      if attributes.has_key?(:'WeeklyRate')
        self.weekly_rate = attributes[:'WeeklyRate']
      end

      if attributes.has_key?(:'MonthlyRate')
        self.monthly_rate = attributes[:'MonthlyRate']
      end

      if attributes.has_key?(:'KmExceedRate')
        self.km_exceed_rate = attributes[:'KmExceedRate']
      end

      if attributes.has_key?(:'IncludedMileage')
        self.included_mileage = attributes[:'IncludedMileage']
      end

      if attributes.has_key?(:'HourlyRateWithTaxes')
        self.hourly_rate_with_taxes = attributes[:'HourlyRateWithTaxes']
      end

      if attributes.has_key?(:'DailyRateWithTaxes')
        self.daily_rate_with_taxes = attributes[:'DailyRateWithTaxes']
      end

      if attributes.has_key?(:'WeeklyRateWithTaxes')
        self.weekly_rate_with_taxes = attributes[:'WeeklyRateWithTaxes']
      end

      if attributes.has_key?(:'MonthlyRateWithTaxes')
        self.monthly_rate_with_taxes = attributes[:'MonthlyRateWithTaxes']
      end

      if attributes.has_key?(:'QuoteCalculateCharge')
        self.quote_calculate_charge = attributes[:'QuoteCalculateCharge']
      end

      if attributes.has_key?(:'ChargeSummary')
        self.charge_summary = attributes[:'ChargeSummary']
      end

      if attributes.has_key?(:'ChargeSummaryDTO')
        if (value = attributes[:'ChargeSummaryDTO']).is_a?(Array)
          self.charge_summary_dto = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          rate_id == o.rate_id &&
          is_company_rate == o.is_company_rate &&
          daily_rate == o.daily_rate &&
          hourly_rate == o.hourly_rate &&
          weekly_rate == o.weekly_rate &&
          monthly_rate == o.monthly_rate &&
          km_exceed_rate == o.km_exceed_rate &&
          included_mileage == o.included_mileage &&
          hourly_rate_with_taxes == o.hourly_rate_with_taxes &&
          daily_rate_with_taxes == o.daily_rate_with_taxes &&
          weekly_rate_with_taxes == o.weekly_rate_with_taxes &&
          monthly_rate_with_taxes == o.monthly_rate_with_taxes &&
          quote_calculate_charge == o.quote_calculate_charge &&
          charge_summary == o.charge_summary &&
          charge_summary_dto == o.charge_summary_dto
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [rate_id, is_company_rate, daily_rate, hourly_rate, weekly_rate, monthly_rate, km_exceed_rate, included_mileage, hourly_rate_with_taxes, daily_rate_with_taxes, weekly_rate_with_taxes, monthly_rate_with_taxes, quote_calculate_charge, charge_summary, charge_summary_dto].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        split_vals = value.split('/')
        value = [split_vals[1], split_vals[0], split_vals[2..split_vals.length - 1]].join('/') + ' ' + RentCentric.configure.timezone_abbr
        DateTime.parse(value)
      when :Date
        split_vals = value.split('/')
        value = [split_vals[1], split_vals[0], split_vals[2..split_vals.length - 1]].join('/') + ' ' + RentCentric.configure.timezone_abbr
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = RentCentric.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
